rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isStudentEmail(email) {
      return email.matches('.*@student\\.tce\\.edu$');
    }
    
    function isFacultyEmail(email) {
      return email.matches('.*@tce\\.edu$') && !email.matches('.*@student\\.tce\\.edu$');
    }

    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && isOwner(userId) && isStudentEmail(request.auth.token.email);
    }
    
    // Hackathons collection
    match /hackathons/{hackathonId} {
      allow read: if true; // Public read access for all hackathons
      allow write: if isAdmin(); // Only admins can create/update hackathons
    }
    
    // Registrations collection
    match /registrations/{registrationId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update: if isAdmin(); // Only admins can update registration status
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // Post-event submissions collection
    match /submissions/{submissionId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update: if isOwner(resource.data.userId) || isAdmin();
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.userId);
      allow write: if isAdmin(); // Only system/admins can create notifications
      allow update: if isOwner(resource.data.userId); // Users can mark as read
    }
    
    // Points history collection (read-only for users)
    match /pointsHistory/{historyId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow write: if false; // Only backend can write to this collection
    }
    
    // Password resets collection (backend only)
    match /passwordResets/{resetId} {
      allow read, write: if false; // Only backend access
    }
    
    // Analytics collection (admin only)
    match /analytics/{analyticsId} {
      allow read: if isAdmin();
      allow write: if false; // Only backend can write analytics
    }
    
    // Leaderboard collection (read-only)
    match /leaderboard/{entryId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only backend can update leaderboard
    }
    
    // Badge definitions (read-only)
    match /badges/{badgeId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Competition categories (read-only)
    match /categories/{categoryId} {
      allow read: if true; // Public read access
      allow write: if isAdmin();
    }
    
    // External competitions from web scraping
    match /externalCompetitions/{competitionId} {
      allow read: if true; // Public read access
      allow write: if isAdmin(); // Only admins/system can write
    }
    
    // Scraping sources configuration (admin only)
    match /scrapingSources/{sourceId} {
      allow read, write: if isAdmin();
    }
    
    // User sessions/tokens (backend only)
    match /sessions/{sessionId} {
      allow read, write: if false; // Only backend access
    }
    
    // System logs (admin read-only)
    match /logs/{logId} {
      allow read: if isAdmin();
      allow write: if false; // Only backend can write logs
    }
  }
}
